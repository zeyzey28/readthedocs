Örnekler
========

Bu bölümde paketin kullanımına dair detaylı örnekler bulabilirsiniz.

Kampüs Örneği
-----------

Bu örnekte, bir kampüs içindeki noktalar arasında en kısa yolu bulacağız.

.. code-block:: python

   from shortestpath2220674052.shortestpath import read_edges, read_nodes, create_graph_from_edges, get_shortest_path, visualize_graph

   # Dosya yolları
   edges_file = "data/test/edges.csv"
   nodes_file = "data/test/nodes.csv"

   try:
       # Verileri oku
       edges = read_edges(edges_file)
       nodes = read_nodes(nodes_file)
       
       # Graf oluştur
       graph = create_graph_from_edges(edges)
       
       # Spor Merkezi'nden (A) Jeomatik Mühendisliği'ne (G)
       start_node = "A"
       end_node = "G"
       
       # En kısa yolu bul
       path, distance = get_shortest_path(graph, start_node, end_node)
       
       if path and distance:
           print(f"\nSpor Merkezi'nden Jeomatik Mühendisliği'ne en kısa yol:")
           print(f"Rota: {' -> '.join(path)}")
           print(f"Toplam mesafe: {distance} metre")
           
           # Rota üzerindeki lokasyonların isimlerini göster
           print("\nRota üzerindeki noktalar:")
           for node in path:
               print(f"{node}: {nodes[node]['name']}")
               
           # Grafı görselleştir
           visualize_graph(graph, nodes, path)
       else:
           print("Yol bulunamadı!")
           
   except Exception as e:
       print(f"Hata: {str(e)}")

İlçeler Örneği
------------

Bu örnekte, Adana ilçeleri arasında en kısa yolu bulacağız.

.. code-block:: python

   from shortestpath2220674052.shortestpath import read_edges, read_nodes, create_graph_from_edges, get_shortest_path, visualize_graph

   # Dosya yolları
   edges_file = "data/production/edges_ilceler.csv"
   nodes_file = "data/production/nodes_ilceler.csv"

   try:
       # Verileri oku
       edges = read_edges(edges_file)
       nodes = read_nodes(nodes_file)
       
       # Graf oluştur
       graph = create_graph_from_edges(edges)
       
       # Ceyhan'dan (41) Yüreğir'e (50)
       start_node = "41"  # Ceyhan
       end_node = "50"    # Yüreğir
       
       # En kısa yolu bul
       path, distance = get_shortest_path(graph, start_node, end_node)
       
       if path and distance:
           print("\nCeyhan'dan Yüreğir'e en kısa yol:")
           print(f"Rota: {' -> '.join(path)}")
           print(f"Toplam mesafe: {distance/1000:.2f} kilometre")
           
           # Rota üzerindeki ilçelerin isimlerini ve rakımlarını göster
           print("\nRota üzerindeki ilçeler:")
           for node in path:
               location_info = f"{node}: {nodes[node]['name']}"
               if 'height' in nodes[node]:
                   location_info += f" (Rakım: {nodes[node]['height']}m)"
               print(location_info)
               
           # Grafı görselleştir
           visualize_graph(graph, nodes, path)
       else:
           print("Yol bulunamadı!")
           
   except Exception as e:
       print(f"Hata: {str(e)}")

Loglama Örneği
------------

Bu örnekte, detaylı loglama özelliğinin nasıl kullanılacağını göreceğiz.

.. code-block:: python

   import logging
   from shortestpath2220674052.shortestpath import main

   # Loglama seviyesini ayarla
   logging.basicConfig(
       level=logging.DEBUG,  # Tüm log seviyelerini göster
       format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
       handlers=[
           logging.FileHandler('shortestpath_detailed.log'),
           logging.StreamHandler()
       ]
   )

   # Test için örnek kullanım
   edges_file = "data/test/edges.csv"
   nodes_file = "data/test/nodes.csv"
   start_node = "A"
   end_node = "G"

   try:
       path, distance = main(edges_file, nodes_file, start_node, end_node)
       
       if path and distance:
           print(f"\nEn kısa yol bulundu:")
           print(f"Rota: {' -> '.join(path)}")
           print(f"Toplam mesafe: {distance} metre")
       else:
           print("Yol bulunamadı!")
           
   except Exception as e:
       logging.error(f"Program çalışırken hata oluştu: {str(e)}")
       print(f"Hata: {str(e)}")

Bu örnekte oluşturulan log dosyası (`shortestpath_detailed.log`) şu tür bilgileri içerecektir:

.. code-block:: text

   2024-03-14 10:30:15,123 - shortestpath2220674052 - INFO - Program başlatıldı: A -> G
   2024-03-14 10:30:15,124 - shortestpath2220674052 - INFO - Kenar bilgileri okunuyor: edges.csv
   2024-03-14 10:30:15,125 - shortestpath2220674052 - DEBUG - Yeni düğüm eklendi: A
   2024-03-14 10:30:15,126 - shortestpath2220674052 - DEBUG - Kenar eklendi: A -> B (Ağırlık: 9)
   2024-03-14 10:30:15,127 - shortestpath2220674052 - INFO - En kısa yol bulundu: A -> B -> C -> G 